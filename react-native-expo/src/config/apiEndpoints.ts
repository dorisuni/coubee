import { authAPI, orderAPI, paymentAPI, qrAPI, 추가API } from '../api/client';

export interface 매개변수정보 {
  이름: string;
  타입: string;
  필수여부: boolean;
  기본값?: string;
  설명?: string;
  예시?: string;
}

export interface API엔드포인트 {
  이름: string;
  설명: string;
  카테고리: string;
  함수: (매개변수들?: Record<string, string>) => Promise<any>;
  매개변수목록?: 매개변수정보[];
  HTTP메서드?: string;
  엔드포인트URL?: string;
}

// 추가 API 엔드포인트들 (coubee-be-order 백엔드의 모든 엔드포인트)
export const 전체API목록 = (사용자아이디: number): API엔드포인트[] => [
  // 🔐 인증 관련 API
  {
    이름: '로그아웃',
    설명: '현재 사용자를 로그아웃합니다',
    카테고리: '🔐 인증',
    함수: () => authAPI.logout(),
    HTTP메서드: 'POST',
    엔드포인트URL: '/api/user/auth/logout'
  },

  // 📦 주문 관리 API
  {
    이름: '사용자 주문 목록 조회',
    설명: '현재 사용자의 주문 목록을 페이지네이션으로 조회합니다',
    카테고리: '📦 주문 관리',
    함수: (매개변수들) => {
      const 페이지 = parseInt(매개변수들?.페이지 || '0');
      const 크기 = parseInt(매개변수들?.크기 || '10');
      return orderAPI.getUserOrders(사용자아이디, 페이지, 크기);
    },
    매개변수목록: [
      {
        이름: '페이지',
        타입: '숫자',
        필수여부: false,
        기본값: '0',
        설명: '조회할 페이지 번호 (0부터 시작)',
        예시: '0'
      },
      {
        이름: '크기',
        타입: '숫자',
        필수여부: false,
        기본값: '10',
        설명: '한 페이지당 표시할 주문 수',
        예시: '10'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: `/api/order/users/${사용자아이디}/orders`
  },

  {
    이름: '전체 주문 목록 조회',
    설명: '시스템의 모든 주문 목록을 조회합니다 (관리자용)',
    카테고리: '📦 주문 관리',
    함수: (매개변수들) => {
      const 페이지 = parseInt(매개변수들?.페이지 || '0');
      const 크기 = parseInt(매개변수들?.크기 || '10');
      return 추가API.전체주문목록조회(페이지, 크기);
    },
    매개변수목록: [
      {
        이름: '페이지',
        타입: '숫자',
        필수여부: false,
        기본값: '0',
        설명: '조회할 페이지 번호',
        예시: '0'
      },
      {
        이름: '크기',
        타입: '숫자',
        필수여부: false,
        기본값: '10',
        설명: '한 페이지당 표시할 주문 수',
        예시: '10'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/orders'
  },

  {
    이름: '주문 상세 조회',
    설명: '특정 주문의 상세 정보를 조회합니다',
    카테고리: '📦 주문 관리',
    함수: (매개변수들) => orderAPI.getOrder(매개변수들?.주문ID || '1'),
    매개변수목록: [
      {
        이름: '주문ID',
        타입: '문자열',
        필수여부: true,
        설명: '조회할 주문의 고유 식별자',
        예시: 'ORDER_123456789'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/orders/{주문ID}'
  },

  {
    이름: '주문 수령 등록',
    설명: '주문이 수령되었음을 시스템에 등록합니다',
    카테고리: '📦 주문 관리',
    함수: (매개변수들) => orderAPI.receiveOrder(매개변수들?.주문ID || '1'),
    매개변수목록: [
      {
        이름: '주문ID',
        타입: '문자열',
        필수여부: true,
        설명: '수령할 주문의 고유 식별자',
        예시: 'ORDER_123456789'
      }
    ],
    HTTP메서드: 'POST',
    엔드포인트URL: '/api/order/orders/{주문ID}/receive'
  },

  {
    이름: '주문 상태 변경',
    설명: '주문의 상태를 변경합니다',
    카테고리: '📦 주문 관리',
    함수: (매개변수들) => orderAPI.updateOrderStatus(
      매개변수들?.주문ID || '1',
      매개변수들?.상태 || 'COMPLETED'
    ),
    매개변수목록: [
      {
        이름: '주문ID',
        타입: '문자열',
        필수여부: true,
        설명: '상태를 변경할 주문의 ID',
        예시: 'ORDER_123456789'
      },
      {
        이름: '상태',
        타입: '문자열',
        필수여부: true,
        설명: '변경할 주문 상태 (PENDING, CONFIRMED, PREPARING, READY, COMPLETED, CANCELLED)',
        예시: 'COMPLETED'
      }
    ],
    HTTP메서드: 'PATCH',
    엔드포인트URL: '/api/order/orders/{주문ID}'
  },

  {
    이름: '주문 취소',
    설명: '특정 주문을 취소합니다',
    카테고리: '📦 주문 관리',
    함수: (매개변수들) => 추가API.주문취소(매개변수들?.주문ID || '1'),
    매개변수목록: [
      {
        이름: '주문ID',
        타입: '문자열',
        필수여부: true,
        설명: '취소할 주문의 고유 식별자',
        예시: 'ORDER_123456789'
      }
    ],
    HTTP메서드: 'DELETE',
    엔드포인트URL: '/api/order/orders/{주문ID}'
  },

  // 💳 결제 관련 API
  {
    이름: '결제 설정 조회',
    설명: '시스템의 결제 설정 정보를 조회합니다',
    카테고리: '💳 결제',
    함수: () => paymentAPI.getPaymentConfig(),
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/payment/config'
  },

  {
    이름: '결제 준비',
    설명: '주문에 대한 결제를 준비합니다',
    카테고리: '💳 결제',
    함수: (매개변수들) => {
      const 준비데이터 = {
        storeId: parseInt(매개변수들?.매장ID || '1'),
        items: [{
          productId: parseInt(매개변수들?.상품ID || '1'),
          name: 매개변수들?.상품명 || '테스트 상품',
          quantity: parseInt(매개변수들?.수량 || '1'),
          price: parseInt(매개변수들?.가격 || '1000')
        }]
      };
      return paymentAPI.preparePayment(매개변수들?.주문ID || '1', 준비데이터);
    },
    매개변수목록: [
      {
        이름: '주문ID',
        타입: '문자열',
        필수여부: true,
        설명: '결제할 주문의 ID',
        예시: 'ORDER_123456789'
      },
      {
        이름: '매장ID',
        타입: '숫자',
        필수여부: true,
        설명: '매장 식별자',
        예시: '1'
      },
      {
        이름: '상품ID',
        타입: '숫자',
        필수여부: true,
        설명: '상품 식별자',
        예시: '1'
      },
      {
        이름: '상품명',
        타입: '문자열',
        필수여부: true,
        설명: '상품 이름',
        예시: '아메리카노'
      },
      {
        이름: '수량',
        타입: '숫자',
        필수여부: true,
        설명: '주문 수량',
        예시: '2'
      },
      {
        이름: '가격',
        타입: '숫자',
        필수여부: true,
        설명: '단위 가격',
        예시: '4500'
      }
    ],
    HTTP메서드: 'POST',
    엔드포인트URL: '/api/order/payment/orders/{주문ID}/prepare'
  },

  {
    이름: '결제 상태 조회',
    설명: '특정 결제의 현재 상태를 조회합니다',
    카테고리: '💳 결제',
    함수: (매개변수들) => paymentAPI.getPaymentStatus(매개변수들?.결제ID || '1'),
    매개변수목록: [
      {
        이름: '결제ID',
        타입: '문자열',
        필수여부: true,
        설명: '조회할 결제의 고유 식별자',
        예시: 'PAYMENT_123456789'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/payment/{결제ID}/status'
  },

  // 📱 QR 코드 관련 API
  {
    이름: 'QR 코드 URL 조회',
    설명: '주문 수령용 QR 코드 URL을 생성합니다',
    카테고리: '📱 QR 코드',
    함수: async (매개변수들) => {
      const 크기 = parseInt(매개변수들?.크기 || '200');
      const url = await qrAPI.getQrCodeUrl(매개변수들?.주문ID || '1', 크기);
      return { qrUrl: url, 크기 };
    },
    매개변수목록: [
      {
        이름: '주문ID',
        타입: '문자열',
        필수여부: true,
        설명: 'QR 코드를 생성할 주문의 ID',
        예시: 'ORDER_123456789'
      },
      {
        이름: '크기',
        타입: '숫자',
        필수여부: false,
        기본값: '200',
        설명: 'QR 코드 이미지 크기 (픽셀)',
        예시: '300'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/qr/orders/{주문ID}'
  },

  {
    이름: 'QR 코드 Base64 이미지 조회',
    설명: '주문 수령용 QR 코드를 Base64 인코딩된 이미지로 조회합니다',
    카테고리: '📱 QR 코드',
    함수: async (매개변수들) => {
      const 크기 = parseInt(매개변수들?.크기 || '200');
      const base64 = await qrAPI.getQrCodeBase64(매개변수들?.주문ID || '1', 크기);
      return { qrBase64: base64, 크기 };
    },
    매개변수목록: [
      {
        이름: '주문ID',
        타입: '문자열',
        필수여부: true,
        설명: 'QR 코드를 생성할 주문의 ID',
        예시: 'ORDER_123456789'
      },
      {
        이름: '크기',
        타입: '숫자',
        필수여부: false,
        기본값: '200',
        설명: 'QR 코드 이미지 크기 (픽셀)',
        예시: '300'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/qr/orders/{주문ID}'
  },

  // 🏪 매장 관리 API
  {
    이름: '매장 목록 조회',
    설명: '시스템에 등록된 모든 매장 목록을 조회합니다',
    카테고리: '🏪 매장 관리',
    함수: () => 추가API.매장목록조회(),
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/stores'
  },

  {
    이름: '매장 상세 조회',
    설명: '특정 매장의 상세 정보를 조회합니다',
    카테고리: '🏪 매장 관리',
    함수: (매개변수들) => 추가API.매장상세조회(parseInt(매개변수들?.매장ID || '1')),
    매개변수목록: [
      {
        이름: '매장ID',
        타입: '숫자',
        필수여부: true,
        설명: '조회할 매장의 고유 식별자',
        예시: '1'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/stores/{매장ID}'
  },

  {
    이름: '매장 생성',
    설명: '새로운 매장을 생성합니다',
    카테고리: '🏪 매장 관리',
    함수: (매개변수들) => {
      const 매장데이터 = {
        name: 매개변수들?.매장명 || '테스트 매장',
        address: 매개변수들?.주소 || '서울시 강남구',
        phoneNumber: 매개변수들?.전화번호 || '02-1234-5678',
        description: 매개변수들?.설명 || '테스트용 매장입니다'
      };
      return 추가API.매장생성(매장데이터);
    },
    매개변수목록: [
      {
        이름: '매장명',
        타입: '문자열',
        필수여부: true,
        설명: '생성할 매장의 이름',
        예시: '쿠비 강남점'
      },
      {
        이름: '주소',
        타입: '문자열',
        필수여부: true,
        설명: '매장의 주소',
        예시: '서울시 강남구 테헤란로 123'
      },
      {
        이름: '전화번호',
        타입: '문자열',
        필수여부: false,
        설명: '매장 연락처',
        예시: '02-1234-5678'
      },
      {
        이름: '설명',
        타입: '문자열',
        필수여부: false,
        설명: '매장에 대한 설명',
        예시: '24시간 운영하는 카페입니다'
      }
    ],
    HTTP메서드: 'POST',
    엔드포인트URL: '/api/order/stores'
  },

  {
    이름: '매장별 주문 목록 조회',
    설명: '특정 매장의 주문 목록을 조회합니다',
    카테고리: '🏪 매장 관리',
    함수: (매개변수들) => {
      const 매장ID = parseInt(매개변수들?.매장ID || '1');
      const 페이지 = parseInt(매개변수들?.페이지 || '0');
      const 크기 = parseInt(매개변수들?.크기 || '10');
      return 추가API.매장별주문목록조회(매장ID, 페이지, 크기);
    },
    매개변수목록: [
      {
        이름: '매장ID',
        타입: '숫자',
        필수여부: true,
        설명: '주문을 조회할 매장의 ID',
        예시: '1'
      },
      {
        이름: '페이지',
        타입: '숫자',
        필수여부: false,
        기본값: '0',
        설명: '조회할 페이지 번호',
        예시: '0'
      },
      {
        이름: '크기',
        타입: '숫자',
        필수여부: false,
        기본값: '10',
        설명: '한 페이지당 표시할 주문 수',
        예시: '10'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/stores/{매장ID}/orders'
  },

  // 🛍️ 상품 관리 API
  {
    이름: '상품 목록 조회',
    설명: '특정 매장의 상품 목록을 조회합니다',
    카테고리: '🛍️ 상품 관리',
    함수: (매개변수들) => 추가API.상품목록조회(parseInt(매개변수들?.매장ID || '1')),
    매개변수목록: [
      {
        이름: '매장ID',
        타입: '숫자',
        필수여부: true,
        설명: '상품을 조회할 매장의 ID',
        예시: '1'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/stores/{매장ID}/products'
  },

  {
    이름: '상품 상세 조회',
    설명: '특정 상품의 상세 정보를 조회합니다',
    카테고리: '🛍️ 상품 관리',
    함수: (매개변수들) => 추가API.상품상세조회(parseInt(매개변수들?.상품ID || '1')),
    매개변수목록: [
      {
        이름: '상품ID',
        타입: '숫자',
        필수여부: true,
        설명: '조회할 상품의 고유 ID',
        예시: '1'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/products/{상품ID}'
  },

  {
    이름: '상품 생성',
    설명: '특정 매장에 새로운 상품을 생성합니다',
    카테고리: '🛍️ 상품 관리',
    함수: (매개변수들) => {
      const 상품데이터 = {
        name: 매개변수들?.상품명 || '테스트 상품',
        price: parseInt(매개변수들?.가격 || '5000'),
        description: 매개변수들?.설명 || '테스트용 상품입니다',
        category: 매개변수들?.카테고리 || '음료'
      };
      return 추가API.상품생성(parseInt(매개변수들?.매장ID || '1'), 상품데이터);
    },
    매개변수목록: [
      {
        이름: '매장ID',
        타입: '숫자',
        필수여부: true,
        설명: '상품을 생성할 매장의 ID',
        예시: '1'
      },
      {
        이름: '상품명',
        타입: '문자열',
        필수여부: true,
        설명: '생성할 상품의 이름',
        예시: '아메리카노'
      },
      {
        이름: '가격',
        타입: '숫자',
        필수여부: true,
        설명: '상품의 가격',
        예시: '4500'
      },
      {
        이름: '설명',
        타입: '문자열',
        필수여부: false,
        설명: '상품에 대한 설명',
        예시: '진한 에스프레소의 깊은 맛'
      },
      {
        이름: '카테고리',
        타입: '문자열',
        필수여부: false,
        기본값: '음료',
        설명: '상품 카테고리',
        예시: '커피'
      }
    ],
    HTTP메서드: 'POST',
    엔드포인트URL: '/api/order/stores/{매장ID}/products'
  },

  // 📊 통계 API
  {
    이름: '매장 통계 조회',
    설명: '매장의 매출 및 주문 통계를 조회합니다',
    카테고리: '📊 통계',
    함수: (매개변수들) => {
      const 매장ID = parseInt(매개변수들?.매장ID || '1');
      const 시작날짜 = 매개변수들?.시작날짜;
      const 종료날짜 = 매개변수들?.종료날짜;
      return 추가API.매장통계조회(매장ID, 시작날짜, 종료날짜);
    },
    매개변수목록: [
      {
        이름: '매장ID',
        타입: '숫자',
        필수여부: true,
        설명: '통계를 조회할 매장의 ID',
        예시: '1'
      },
      {
        이름: '시작날짜',
        타입: '문자열',
        필수여부: false,
        설명: '통계 조회 시작 날짜 (YYYY-MM-DD)',
        예시: '2024-01-01'
      },
      {
        이름: '종료날짜',
        타입: '문자열',
        필수여부: false,
        설명: '통계 조회 종료 날짜 (YYYY-MM-DD)',
        예시: '2024-12-31'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/stores/{매장ID}/statistics'
  },

  {
    이름: '일별 매출 조회',
    설명: '특정 날짜의 매장 매출을 조회합니다',
    카테고리: '📊 통계',
    함수: (매개변수들) => {
      return 추가API.일별매출조회(
        parseInt(매개변수들?.매장ID || '1'),
        매개변수들?.날짜 || '2024-01-01'
      );
    },
    매개변수목록: [
      {
        이름: '매장ID',
        타입: '숫자',
        필수여부: true,
        설명: '매출을 조회할 매장의 ID',
        예시: '1'
      },
      {
        이름: '날짜',
        타입: '문자열',
        필수여부: true,
        설명: '조회할 날짜 (YYYY-MM-DD 형식)',
        예시: '2024-01-01'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/stores/{매장ID}/sales/daily'
  },

  // 👤 사용자 관리 API
  {
    이름: '사용자 프로필 조회',
    설명: '현재 사용자의 프로필 정보를 조회합니다',
    카테고리: '👤 사용자 관리',
    함수: () => 추가API.사용자프로필조회(사용자아이디),
    HTTP메서드: 'GET',
    엔드포인트URL: `/api/user/users/${사용자아이디}/profile`
  },

  {
    이름: '사용자 프로필 수정',
    설명: '현재 사용자의 프로필 정보를 수정합니다',
    카테고리: '👤 사용자 관리',
    함수: (매개변수들) => {
      const 프로필데이터 = {
        nickName: 매개변수들?.닉네임 || '새로운닉네임',
        email: 매개변수들?.이메일 || 'test@example.com',
        phoneNumber: 매개변수들?.전화번호 || '010-1234-5678'
      };
      return 추가API.사용자프로필수정(사용자아이디, 프로필데이터);
    },
    매개변수목록: [
      {
        이름: '닉네임',
        타입: '문자열',
        필수여부: false,
        설명: '변경할 사용자 닉네임',
        예시: '쿠비사용자'
      },
      {
        이름: '이메일',
        타입: '이메일',
        필수여부: false,
        설명: '변경할 이메일 주소',
        예시: 'user@coubee.com'
      },
      {
        이름: '전화번호',
        타입: '전화번호',
        필수여부: false,
        설명: '변경할 전화번호',
        예시: '010-9876-5432'
      }
    ],
    HTTP메서드: 'PUT',
    엔드포인트URL: `/api/user/users/${사용자아이디}/profile`
  },

  // 🔔 알림 API
  {
    이름: '알림 목록 조회',
    설명: '현재 사용자의 알림 목록을 조회합니다',
    카테고리: '🔔 알림',
    함수: () => 추가API.알림목록조회(사용자아이디),
    HTTP메서드: 'GET',
    엔드포인트URL: `/api/order/users/${사용자아이디}/notifications`
  },

  {
    이름: '알림 읽음 처리',
    설명: '특정 알림을 읽음 상태로 변경합니다',
    카테고리: '🔔 알림',
    함수: (매개변수들) => 추가API.알림읽음처리(parseInt(매개변수들?.알림ID || '1')),
    매개변수목록: [
      {
        이름: '알림ID',
        타입: '숫자',
        필수여부: true,
        설명: '읽음 처리할 알림의 ID',
        예시: '1'
      }
    ],
    HTTP메서드: 'PATCH',
    엔드포인트URL: '/api/order/notifications/{알림ID}/read'
  },

  // ⭐ 리뷰 API
  {
    이름: '상품 리뷰 목록 조회',
    설명: '특정 상품의 리뷰 목록을 조회합니다',
    카테고리: '⭐ 리뷰',
    함수: (매개변수들) => 추가API.상품리뷰목록조회(parseInt(매개변수들?.상품ID || '1')),
    매개변수목록: [
      {
        이름: '상품ID',
        타입: '숫자',
        필수여부: true,
        설명: '리뷰를 조회할 상품의 ID',
        예시: '1'
      }
    ],
    HTTP메서드: 'GET',
    엔드포인트URL: '/api/order/products/{상품ID}/reviews'
  },

  {
    이름: '리뷰 작성',
    설명: '주문한 상품에 대한 리뷰를 작성합니다',
    카테고리: '⭐ 리뷰',
    함수: (매개변수들) => {
      const 리뷰데이터 = {
        rating: parseInt(매개변수들?.평점 || '5'),
        comment: 매개변수들?.댓글 || '맛있었습니다!',
        productId: parseInt(매개변수들?.상품ID || '1')
      };
      return 추가API.리뷰작성(매개변수들?.주문ID || '1', 리뷰데이터);
    },
    매개변수목록: [
      {
        이름: '주문ID',
        타입: '문자열',
        필수여부: true,
        설명: '리뷰를 작성할 주문의 ID',
        예시: 'ORDER_123456789'
      },
      {
        이름: '상품ID',
        타입: '숫자',
        필수여부: true,
        설명: '리뷰를 작성할 상품의 ID',
        예시: '1'
      },
      {
        이름: '평점',
        타입: '숫자',
        필수여부: true,
        설명: '상품 평점 (1-5)',
        예시: '5'
      },
      {
        이름: '댓글',
        타입: '문자열',
        필수여부: false,
        설명: '리뷰 내용',
        예시: '정말 맛있었습니다!'
      }
    ],
    HTTP메서드: 'POST',
    엔드포인트URL: '/api/order/orders/{주문ID}/review'
  },

  // 🎫 쿠폰 API
  {
    이름: '사용자 쿠폰 목록 조회',
    설명: '현재 사용자가 보유한 쿠폰 목록을 조회합니다',
    카테고리: '🎫 쿠폰',
    함수: () => 추가API.사용자쿠폰목록조회(사용자아이디),
    HTTP메서드: 'GET',
    엔드포인트URL: `/api/order/users/${사용자아이디}/coupons`
  },

  {
    이름: '쿠폰 사용',
    설명: '보유한 쿠폰을 특정 주문에 사용합니다',
    카테고리: '🎫 쿠폰',
    함수: (매개변수들) => 추가API.쿠폰사용(
      parseInt(매개변수들?.쿠폰ID || '1'),
      매개변수들?.주문ID || '1'
    ),
    매개변수목록: [
      {
        이름: '쿠폰ID',
        타입: '숫자',
        필수여부: true,
        설명: '사용할 쿠폰의 ID',
        예시: '1'
      },
      {
        이름: '주문ID',
        타입: '문자열',
        필수여부: true,
        설명: '쿠폰을 적용할 주문의 ID',
        예시: 'ORDER_123456789'
      }
    ],
    HTTP메서드: 'POST',
    엔드포인트URL: '/api/order/coupons/{쿠폰ID}/use'
  }
];

// 카테고리별 API 그룹화 함수
export const 카테고리별API그룹화 = (API목록: API엔드포인트[]): Record<string, API엔드포인트[]> => {
  return API목록.reduce((그룹, api) => {
    const 카테고리 = api.카테고리;
    if (!그룹[카테고리]) {
      그룹[카테고리] = [];
    }
    그룹[카테고리].push(api);
    return 그룹;
  }, {} as Record<string, API엔드포인트[]>);
};

// API 검색 함수
export const API검색 = (API목록: API엔드포인트[], 검색어: string): API엔드포인트[] => {
  const 소문자검색어 = 검색어.toLowerCase();
  return API목록.filter(api => 
    api.이름.toLowerCase().includes(소문자검색어) ||
    api.설명.toLowerCase().includes(소문자검색어) ||
    api.카테고리.toLowerCase().includes(소문자검색어)
  );
};
